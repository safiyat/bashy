function check_ssh(){
    start_time=$(date +%s)
    echo -n Trying to SSH to $@ ..
    while true; do
        echo -n .
        if ssh $@ "exit" 2> /dev/null > /dev/null; then
            break
        fi
        sleep 1
    done
    echo
    end_time=$(date +%s)
    total_time=$(expr ${end_time} - ${start_time})
    echo -e "\n"
    echo Waited for SSH for $(date -ud "@$total_time" +'%H hours %M minutes %S seconds').
    ssh $@
}

function check_ssh_alive(){
   echo -n Trying to SSH to $@ ..
   while true; do
       echo -n .
       if ssh $@ "exit" 2> /dev/null > /dev/null; then
           break
       fi
       sleep 1
   done
   echo
   while true; do
       ssh $@ "echo $(date) alive"
   done
}


function v(){
    set -x
    venv_name=${1:-venv}
    python_bin=${2:-python}
    ${python_bin} -m venv --copies ${venv_name}
    set +x
}

function s(){
    set -x
    venv_name=${1:-venv}
    source ${venv_name}/bin/activate
    set +x
}


# Vim pager tool
function vmore(){
    if [[ -e ~/.vimrc.more ]]; then
        vim -u ~/.vimrc.more - $@
    else
        echo "No .vimrc.more found in the HOME directory." > /dev/stderr
    fi
}


# PID / Process name based search
function psg(){
    # set -x
    if [[ -z "$@" ]]; then
        echo No search string.
        return
    fi
    output=$(ps aux | grep -v grep | grep --color=never --ignore-case -e VSZ -e "$@")
    if ! grep -q --ignore-case "$@" <<< "${output}"; then
        echo "No processes found."
    else
        echo "${output}"
    fi
    # set +x
}

# Kill based on the output of psg
function psg_kill(){
    # set -x
    signal=
    first_param=$1
    if [[ "${first_param}" =~ ^[+-]?([0-9]+([.][0-9]*)?|\.[0-9]+)$ ]] && [ "${first_param}" -lt 0 ] && [ "${first_param}" -gt -10 ]; then
        # Is a signal.
        signal="${first_param}"
        shift
    fi
    psg_output="$(psg $@)"
    if [[ "${psg_output}" == "No processes found." ]] || [[ "${psg_output}" == "No search string." ]]; then
        echo "${psg_output}"
        set +x
        return
    fi
    pids=$(echo "${psg_output}" | grep -v VSZ | awk '{print $2}')
    command="sudo /bin/kill ${signal} ${pids}"
    echo ${command}
    ${command}
    # set +x
}


function aria-web(){
    # set -x
    if [[ -e ${HOME}/.aria2/web-ui/node-server.js ]]; then
        nvm install --lts
        nvm use --lts
        # Refer: https://github.com/safiyat/webui-aria2/commit/6e43ed5236479b37b2270d7e33c7f3ffc87992d2
        cd ${HOME}/.aria2/web-ui/ && node node-server.js 8888 127.0.0.1 > ${HOME}/.aria2/aria-web.log 2> ${HOME}/.aria2/aria-web.log.err &
    else
        echo "No node-server.js found in ${HOME}/.aria2/web-ui/" > /dev/stderr
    fi
    # set +x
}

function netstat_like() {
    OUTPUT=$(sudo lsof -i -n -P | grep -e TCP -e UDP -e COMMAND)
    if [[ -n "${@}" ]]; then
        echo "${OUTPUT}" | grep -e COMMAND -e ${@}
    else
        echo "${OUTPUT}"
    fi
}

function long_clear() {
    len=$1
    len=${len:-100}
    python -c "print('\n' * ${len})"
}

function loiter() {
    if [ ! -d ${HOME}/GitHub/mouse_cursor_randomizer/venv/bin/ ]; then
        echo 'loiter command is not available.' > /dev/stderr
        return
    fi
    # In a subshell, so that the invoking shell's virtual environment (if any) isn't deactivated.
    (
        source ${HOME}/GitHub/mouse_cursor_randomizer/venv/bin/activate
        python ${HOME}/GitHub/mouse_cursor_randomizer/move.py
        deactivate
    )
}

function keep_alive() {
    function trap_method() {
        trap - INT
        echo
        echo We kept the session alive till: $(date)
    }
    trap trap_method INT
    echo Keep alive starting at: $(date)
    while true; do
        echo -n .
        sleep 1
    done
}
